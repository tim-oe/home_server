tasks.register('deployService') {
    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/services/${project.svc}", into: '/mnt/raid/services'
            }
        }
    }
}

tasks.register('deployGrafana', GradleBuild) {
    description = 'deploy grafana scripts'
    group = "deploy stuff"
    buildName = 'grafana'
    startParameter.projectProperties = ['svc':'grafana']
    tasks = ['deployService']
}

tasks.register('deployJenkins', GradleBuild) {
    description = 'deploy jenkins scripts'
    group = "deploy stuff"
    buildName = 'jenkins'
    startParameter.projectProperties = ['svc':'jenkins']
    tasks = ['deployService']
}

tasks.register('deployNexus', GradleBuild) {
    description = 'deploy nexus scripts'
    group = "deploy stuff"
    buildName = 'nexus'
    startParameter.projectProperties = ['svc':'nexus']
    tasks = ['deployService']
}

tasks.register('deployNginx', GradleBuild) {
    description = 'deploy nginx scripts'
    group = "deploy stuff"
    buildName = 'nginx'
    startParameter.projectProperties = ['svc':'nginx']
    tasks = ['deployService']
    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = executeSudo 'mkdir -p /mnt/raid/services/nginx/.conf.d'
                result = executeSudo 'chmod 777 /mnt/raid/services/nginx/.conf.d'
            }
        }
    }

}

tasks.register('deployOpenhab', GradleBuild) {
    description = 'deploy openhab scripts'
    group = "deploy stuff"
    buildName = 'openhab'
    startParameter.projectProperties = ['svc':'openhab']
    tasks = ['deployService']
}

tasks.register('deployPortainer', GradleBuild) {
    description = 'deploy portainer scripts'
    group = "deploy stuff"
    buildName = 'portainer'
    startParameter.projectProperties = ['svc':'portainer']
    tasks = ['deployService']
}

tasks.register('deploySonarqube', GradleBuild) {
    description = 'deploy sonarqube scripts'
    group = "deploy stuff"
    buildName = 'sonarqube'
    startParameter.projectProperties = ['svc':'sonarqube']
    tasks = ['deployService']
}

tasks.register('deployUnifi', GradleBuild) {
    description = 'deploy unifi scripts'
    group = "deploy stuff"
    buildName = 'unifi' 
    startParameter.projectProperties = ['svc':'unifi']
    tasks = ['deployService']
}

tasks.register('deployUpsMon', GradleBuild) {
    description = 'deploy ups scripts'
    group = "deploy stuff"
    buildName = 'upsmon' 
    startParameter.projectProperties = ['svc':'upsmon']
    tasks = ['deployService']
}

tasks.register('deployVault', GradleBuild) {
    description = 'deploy vaultwarden scripts'
    group = "deploy stuff"
    buildName = 'vaultwarden' 
    startParameter.projectProperties = ['svc':'vaultwarden']
    tasks = ['deployService']
}

/** 
 * can't nest GradleBuild tasks so use dependsOn to group
 * to call multiple GradleBuild tasks each thas has to have a unique buildName
 */
tasks.register('deployAll') {
    description = 'deploy all scripts scripts'
    group = "deploy stuff"
    dependsOn = ['deployVault',
        'deployJenkins',
        'deployGrafana',
        'deployNginx',
        'deployNexus',
        'deployOpenhab',
        'deployPortainer',
        'deploySonarqube', 
        'deployUnifi',
        'deployUpsMon',
        'deployVault' 
        ]
}
