/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples
 */
 plugins { 
    // launch docker containers
    id "com.avast.gradle.docker-compose" version "0.16.11"

    // https://gradle-ssh-plugin.github.io/docs/
    id 'org.hidetake.ssh' version '2.11.2'
}

/**
 * containers
 * https://github.com/avast/gradle-docker-compose-plugin
 * see nested config
 */
dockerCompose {
    jenkins {
        useComposeFiles = ['src/mnt/raid/jenkins/docker-compose.yml']
    }
    nexus {
        useComposeFiles = ['src/mnt/raid/nexus/docker-compose.yml']
    }
    nginx {
        useComposeFiles = ['src/mnt/raid/nginx/docker-compose.yml']
    }
    sonar {
        useComposeFiles = ['src/mnt/raid/sonarcube/docker-compose.yml']
    }
    openhab {
        useComposeFiles = ['src/mnt/raid/openhab/docker-compose.yml']
    }
    unifi {
        useComposeFiles = ['src/mnt/raid/unifi/docker-compose.yml']
    }
}

remotes {
    desktop {
        host = 'tec-desktop'
        user = 'deployer'
        // needs to be open ssh format and chmod 600
        // need to have entry in authorized hosts
        // https://gradle-ssh-plugin.github.io/docs/#__code_identity_code_public_key_authentication
        identity = file("$project.gradle.gradleUserHomeDir/deployer.pem")
    }
}

task dockerNet {
    description = 'created shared docker network needs to run once'
    group = "docker stuff"
    doLast {
        exec {
            workingDir '.'
            commandLine 'docker', 'network', 'create', '--driver', 'bridge', 'share-net'
        }
    }
}

// set access for deployer user
// https://unix.stackexchange.com/questions/195466/setting-multiple-groups-as-directory-owners
task initAcl {
    description = 'set access for dployere'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = execute 'find  /mnt/raid/ -maxdepth 1 -type d \\( ! -iname ".*" \\) -exec sudo setfacl -m g:deployer:rwx {} \\;'
                println result
            }
            session(remotes.desktop) {
                def result = execute 'find  /mnt/raid/ -maxdepth 2 -type f \\( ! -iname "*.service" \\) -exec sudo setfacl -m g:deployer:rw {} \\;'
                println result
            }
            session(remotes.desktop) {
                def result = execute 'find  /mnt/raid/ -maxdepth 2 -type f \\( ! -iname "*.yml" \\) -exec sudo setfacl -m g:deployer:rw {} \\;'
                println result
            }
        }
    }
}

task deployJenkins {
    description = 'deploy jenkins scripts and recycle service'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/jenkins", into: '/mnt/raid'
            }
            session(remotes.desktop) {
                def result = execute 'sudo systemctl restart jenkins.service'
                println result
            }
        }
    }
}

task deployNexus {
    description = 'deploy nexus scripts and recycle service'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/nexus", into: '/mnt/raid'
            }
            session(remotes.desktop) {
                def result = execute 'sudo systemctl restart nexus.service'
                println result
            }
        }
    }
}

task deployNginx {
    description = 'deploy nginx scripts and recycle service'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/nginx", into: '/mnt/raid'
            }
            session(remotes.desktop) {
                def result = execute 'sudo systemctl restart nginx.service'
                println result
            }
        }
    }
}

task deployOpenhab {
    description = 'deploy openhab scripts and recycle service'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/openhab", into: '/mnt/raid'
            }
            session(remotes.desktop) {
                def result = execute 'sudo systemctl restart openhab.service'
                println result
            }
        }
    }
}

task deploySonarqube {
    description = 'deploy sonarqube scripts and recycle service'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/sonarqube", into: '/mnt/raid'
            }
            session(remotes.desktop) {
                def result = execute 'sudo systemctl restart sonarqube.service'
                println result
            }
        }
    }
}

task deployUnifi {
    description = 'deploy unifi scripts and recycle service'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/unifi", into: '/mnt/raid'
            }
            session(remotes.desktop) {
                def result = execute 'sudo systemctl restart unifi.service'
                println result
            }
        }
    }
}

task deployAll(type: GradleBuild) {
    description = 'deploy all scripts scripts and recycle service'
    group = "deploy stuff"
    tasks = ['deployUnifi', 'deploySonarqube', 'deployOpenhab', 'deployNginx', 'deployNexus', 'deployJenkins']
}
