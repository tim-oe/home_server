/**
 * gradle build file for the homer services project
 */
 plugins { 
    // https://gradle-ssh-plugin.github.io/docs/
    id 'org.hidetake.ssh' version '2.11.2'

    // https://github.com/diffplug/spotless/tree/main/plugin-gradle
    id("com.diffplug.spotless") version "6.25.0"
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

apply from: 'src/gradle/services.gradle'
apply from: 'src/gradle/docker.gradle'

spotless {
    
    // https://github.com/diffplug/spotless/issues/1795
    // TODO https://github.com/google/yamlfmt
    // yaml {
    //     target '**/*.yml'
    //     jackson()
    //     prettier()
    //     indentWithSpaces()
    // }

    groovyGradle {
        target '*.gradle','src/gradle/*.gradle'
        greclipse()
        indentWithSpaces()
    }
}

remotes {
    desktop {
        host = 'tec-desktop'
        user = 'ansible'
        // needs to be open ssh format and chmod 600
        // need to have entry in authorized hosts
        // https://gradle-ssh-plugin.github.io/docs/#__code_identity_code_public_key_authentication
        identity = file("$project.gradle.gradleUserHomeDir/ansible.pem")
    }
}

tasks.register('resetHost') {
    description = 'reset known host for tec-test'
    group = "hosts"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    "ssh-keygen -R tec-desktop"
        }
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    "ssh-keyscan -T 30 -H tec-desktop >> ~/.ssh/known_hosts"
        }
    }
}

task dockerNet {
    description = 'created shared docker network needs to run once'
    group = "docker stuff"
    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = executeSudo 'docker network create --driver bridge share-net'
                println result
            }
        }
    }
}

// set access for deployer user
// https://unix.stackexchange.com/questions/195466/setting-multiple-groups-as-directory-owners
tasks.register ('initAcl') {
    description = 'set access for ansible user'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = execute 'sudo mkdir -p /mnt/raid/services'
                result = executeSudo 'setfacl -m g:ansible:rwx /mnt/raid/services'
                result = executeSudo 'find  /mnt/raid/services -maxdepth 1 -type d \\( ! -iname ".*" \\) -exec setfacl -m g:ansible:rwx {} \\;'
                result = executeSudo 'find  /mnt/raid/services -maxdepth 2 -type f \\( ! -iname "*.yml" \\) -exec setfacl -m g:ansible:rw {} \\;'
            }
        }
    }
}

tasks.register('deployScripts') {
    description = 'deploy scripts to tec-desktop'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = executeSudo 'mkdir -p /mnt/raid/bin'
                result = executeSudo 'chmod 777 /mnt/raid/bin'

                // https://stackoverflow.com/questions/34749398/gradle-ssh-plugin-copying-parent-folder-and-not-just-files
                put from: Arrays.asList(new File("${project.rootDir}/src/bin").listFiles()), into: '/mnt/raid/bin'
                
                result = executeSudo 'find  /mnt/raid/bin -name *.sh -type f -exec chmod 755 {} \\;'
            }
        }
    }
}

tasks.register('deployCron') {
    description = 'deploy cron scripts to tec-desktop'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = executeSudo 'rm -fR /tmp/cron.d'
                result = execute "mkdir -p /tmp/cron.d"                
                
                put from: Arrays.asList(new File("${project.rootDir}/src/etc/cron.d").listFiles()), into: '/tmp/cron.d'
                
                result = executeSudo "cp /tmp/cron.d/* /etc/cron.d/"
                result = executeSudo "chmod 644 /etc/cron.d/*"
                result = executeSudo "chown root:root /etc/cron.d/*"
            }
        }
    }
}
