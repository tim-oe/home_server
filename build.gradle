/**
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples
 */
 plugins { 
    // https://gradle-ssh-plugin.github.io/docs/
    id 'org.hidetake.ssh' version '2.11.2'

    // https://github.com/diffplug/spotless/tree/main/plugin-gradle
    id("com.diffplug.spotless") version "6.25.0"
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

spotless {
    
    // https://github.com/diffplug/spotless/issues/1795
    // TODO https://github.com/google/yamlfmt
    // yaml {
    //     target '**/*.yml'
    //     jackson()
    //     prettier()
    //     indentWithSpaces()
    // }

    groovyGradle {
        target '*.gradle','src/gradle/*.gradle'
        greclipse()
        indentWithSpaces()
    }
}

remotes {
    desktop {
        host = 'tec-desktop'
        user = 'ansible'
        // needs to be open ssh format and chmod 600
        // need to have entry in authorized hosts
        // https://gradle-ssh-plugin.github.io/docs/#__code_identity_code_public_key_authentication
        identity = file("$project.gradle.gradleUserHomeDir/ansible.pem")
    }
}

tasks.register('resetHost') {
    description = 'reset known host for tec-test'
    group = "hosts"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    "ssh-keygen -R tec-desktop"
        }
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    "ssh-keyscan -T 30 -H tec-desktop >> ~/.ssh/known_hosts"
        }
    }
}

task dockerNet {
    description = 'created shared docker network needs to run once'
    group = "docker stuff"
    doLast {
        exec {
            workingDir '.'
            commandLine 'docker', 'network', 'create', '--driver', 'bridge', 'share-net'
        }
    }
}

// set access for deployer user
// https://unix.stackexchange.com/questions/195466/setting-multiple-groups-as-directory-owners
tasks.register ('initAcl') {
    description = 'set access for ansible user'
    group = "deploy stuff"

    doLast {
        ssh.run {
            session(remotes.desktop) {
                def result = execute 'sudo setfacl -m g:ansible:rwx /mnt/raid/services'
                println result
            }
            session(remotes.desktop) {
                def result = execute 'find  /mnt/raid/services -maxdepth 1 -type d \\( ! -iname ".*" \\) -exec sudo setfacl -m g:ansible:rwx {} \\;'
                println result
            }
            session(remotes.desktop) {
                def result = execute 'find  /mnt/raid/services -maxdepth 2 -type f \\( ! -iname "*.yml" \\) -exec sudo setfacl -m g:ansible:rw {} \\;'
                println result
            }
        }
    }
}

tasks.register('deployService') {
    doLast {
        ssh.run {
            session(remotes.desktop) {
                put from: "${project.rootDir}/src/mnt/raid/${project.svc}", into: '/mnt/raid/services'
            }
        }
    }
}

tasks.register('deployGrafana', GradleBuild) {
    description = 'deploy grafana scripts'
    group = "deploy stuff"
    buildName = 'grafana'
    startParameter.projectProperties = ['svc':'grafana']
    tasks = ['deployService']
}

tasks.register('deployJenkins', GradleBuild) {
    description = 'deploy jenkins scripts'
    group = "deploy stuff"
    buildName = 'jenkins'
    startParameter.projectProperties = ['svc':'jenkins']
    tasks = ['deployService']
}

tasks.register('deployNexus', GradleBuild) {
    description = 'deploy nexus scripts'
    group = "deploy stuff"
    buildName = 'nexus'
    startParameter.projectProperties = ['svc':'nexus']
    tasks = ['deployService']
}

tasks.register('deployNginx', GradleBuild) {
    description = 'deploy nginx scripts'
    group = "deploy stuff"
    buildName = 'nginx'
    startParameter.projectProperties = ['svc':'nginx']
    tasks = ['deployService']
}

tasks.register('deployOpenhab', GradleBuild) {
    description = 'deploy openhab scripts'
    group = "deploy stuff"
    buildName = 'openhab'
    startParameter.projectProperties = ['svc':'openhab']
    tasks = ['deployService']
}

tasks.register('deploySonarqube', GradleBuild) {
    description = 'deploy sonarqube scripts'
    group = "deploy stuff"
    buildName = 'sonarqube'
    startParameter.projectProperties = ['svc':'sonarqube']
    tasks = ['deployService']
}

tasks.register('deployUnifi', GradleBuild) {
    description = 'deploy unifi scripts'
    group = "deploy stuff"
    buildName = 'unifi' 
    startParameter.projectProperties = ['svc':'unifi']
    tasks = ['deployService']
}

tasks.register('deployVault', GradleBuild) {
    description = 'deploy vaultwarden scripts'
    group = "deploy stuff"
    buildName = 'vaultwarden' 
    startParameter.projectProperties = ['svc':'vaultwarden']
    tasks = ['deployService']
}

/** 
 * can't nest GradleBuild tasks so use dependsOn to group
 * to call multiple GradleBuild tasks each thas has to have a unique buildName
 */
tasks.register('deployAll') {
    description = 'deploy all scripts scripts'
    group = "deploy stuff"
    dependsOn = ['deployVault',
        'deployUnifi', 
        'deploySonarqube', 
        'deployOpenhab',
        'deployNginx',
        'deployNexus',
        'deployJenkins',
        'deployGrafana']
}